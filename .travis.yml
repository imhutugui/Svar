language: cpp
sudo: true
dist: trusty

matrix:
  include:
  # OSX / Clang

  - os: osx
    osx_image: xcode10.2

  - os: osx
    osx_image: xcode11.2

  - os: osx
    osx_image: xcode12

  - os: osx
    osx_image: xcode12
    env:
      - IMPLICIT_CONVERSIONS=OFF

  # Linux / GCC

  - os: linux
    compiler: gcc
    env: compiler=g++-4.8
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-4.8', 'ninja-build']

  - os: linux
    compiler: gcc
    env: compiler=g++-4.9
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-4.9', 'ninja-build']

  - os: linux
    compiler: gcc
    env: COMPILER=g++-5
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-5', 'ninja-build']

  - os: linux
    compiler: gcc
    env: COMPILER=g++-6
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-6', 'ninja-build']

  - os: linux
    compiler: gcc
    env: COMPILER=g++-7
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-7', 'ninja-build']

  - os: linux
    compiler: gcc
    env: COMPILER=g++-8
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-8', 'ninja-build']

  - os: linux
    compiler: gcc
    env:
      - COMPILER=g++-8
      - CXXFLAGS=-std=c++17
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-8', 'ninja-build']

  # Linux / Clang

  - os: linux
    compiler: clang
    env: COMPILER=clang++-3.7
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.7']
        packages: ['g++-6', 'clang-3.7', 'ninja-build']

  - os: linux
    compiler: clang
    env: COMPILER=clang++-3.8
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-6', 'clang-3.8', 'ninja-build']

  - os: linux
    compiler: clang
    env: COMPILER=clang++-3.9
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test']
        packages: ['g++-6', 'clang-3.9', 'ninja-build']

  - os: linux
    compiler: clang
    env: COMPILER=clang++-4.0
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-4.0']
        packages: ['g++-6', 'clang-4.0', 'ninja-build']

  - os: linux
    compiler: clang
    env: COMPILER=clang++-5.0
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
        packages: ['g++-6', 'clang-5.0', 'ninja-build']

  - os: linux
    compiler: clang
    env: COMPILER=clang++-6.0
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-6.0']
        packages: ['g++-6', 'clang-6.0', 'ninja-build']

  - os: linux
    compiler: clang
    env: COMPILER=clang++-7
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-7']
        packages: ['g++-6', 'clang-7', 'ninja-build']

  - os: linux
    compiler: clang
    env:
      - COMPILER=clang++-7
      - CXXFLAGS=-std=c++1z
    addons:
      apt:
        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-7']
        packages: ['g++-6', 'clang-7', 'ninja-build']

script:
# get CMake and Ninja (only for systems with brew - macOS)
  - |
     if [[ (-x $(which brew)) ]]; then
       brew update
       brew install cmake ninja
       brew upgrade cmake
       cmake --version
       export CMAKE_OPTIONS="-DBUILD_PYTHON=OFF"
     fi

  # make sure CXX is correctly set
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi

  # show OS/compiler version
  - uname -a
  - $CXX --version

  # compile and execute unit tests
  - mkdir -p build && cd build
  - cmake .. ${CMAKE_OPTIONS} && cmake --build . --config Release
  - sudo make install
  - svar tests
  
# Generate and deploy documentation
after_success:
  - cd $TRAVIS_BUILD_DIR
